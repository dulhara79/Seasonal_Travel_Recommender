import unittest

from server.utils import responsible_ai


class ResponsibleAITest(unittest.TestCase):
    def test_enrich_with_existing_packing_and_locations(self):
        resp = {
            "status": "complete",
            "trip_plan": {
                "destination": "kandy",
                "locations_to_visit": ["Temple of the Sacred Tooth Relic"],
                "location_recommendations": {"recommended_locations": [{"name": "Temple of the Sacred Tooth Relic", "reason": "Historic site", "source_hints": ["source"]}]},
                "packing_list": {"categories": [{"name": "Clothing", "items": ["shirt"]}], "notes": []}
            }
        }

        out = responsible_ai.enrich_trip_plan_response(resp)
        self.assertIn("responsible_ai_enriched", out)
        tp = out["trip_plan"]
        self.assertIn("responsible_ai", tp)
        self.assertIn("location_recommendations_enriched", tp)
        self.assertTrue(tp["packing_list"]["categories"])

    def test_enrich_when_packing_missing(self):
        resp = {
            "status": "complete",
            "trip_plan": {
                "destination": "kandy",
                "locations_to_visit": ["Royal Botanical Gardens"]
            }
        }

        out = responsible_ai.enrich_trip_plan_response(resp)
        tp = out["trip_plan"]
        # packing list should be autogenerated
        self.assertIn("packing_list", tp)
        self.assertIn("notes", tp["packing_list"]) or self.assertIn("notes", tp["packing_list"])
        # responsible block added
        self.assertIn("responsible_ai", tp)


if __name__ == "__main__":
    unittest.main()
